ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=status_group),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 0, hjust = 0.5)) +
ggtitle("Mosaico public_meeting - permit") +
xlab("") +
ylab("")
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=status_group),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1)) +
ggtitle("Mosaico public_meeting - permit") +
xlab("") +
ylab("")
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=status_group),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1)) +
ggtitle("Mosaico public_meeting - permit") +
xlab("") +
ylab("")
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=status_group),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1)) +
ggtitle("Mosaico public_meeting - permit") +
xlab("public_meeting") +
ylab("permit")
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1)) +
ggtitle("Mosaico public_meeting - permit") +
xlab("public_meeting") +
ylab("permit")
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1)) +
ggtitle("Mosaico public_meeting - permit") +
xlab("permit") +
ylab("public_meeting")
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=public_meeting),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1)) +
ggtitle("Mosaico public_meeting - permit") +
xlab("permit") +
ylab("public_meeting")
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1)) +
ggtitle("Mosaico public_meeting - permit") +
xlab("permit") +
ylab("public_meeting")
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1),
axis.ticks.x = element_text(c(""))) +
+ scale_x_discrete(breaks=c("0.5","1.5","2.5"),
labels=c("functional", "functional needs repair", "non functional"))
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1),
axis.ticks.x = element_text(c(""))) +
scale_x_discrete(breaks=c("0.5","1.5","2.5"),
labels=c("functional", "functional needs repair", "non functional"))
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1),
axis.ticks.x = element_text(c(""))) +
scale_x_discrete(labels=c("functional", "functional needs repair", "non functional"))
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1),
axis.ticks.x = element_text(c(""))) +
scale_x_discrete(limits=c("functional", "functional needs repair", "non functional"))
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1),
axis.ticks.x = element_text(c(""))) +
scale_x_discrete(limits=c("functional", "functional",
"functional needs repair",  "functional needs repair",
"non functional", "non functional"))
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1),
axis.ticks.x = element_text(c(""))) +
ggtitle("Mosaico public_meeting - permit") +
xlab("permit") +
ylab("public_meeting")
aux<- datTrain[,c("public_meeting", "permit", "status_group")]
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1),
axis.ticks.x = element_text(c(""))) +
ggtitle("Mosaico public_meeting - permit") +
xlab("permit") +
ylab("public_meeting")
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_x_discrete(limits=c("functional", "functional",
"functional needs repair",  "functional needs repair",
"non functional", "non functional"))
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_x_discrete(breaks=c("0.5","1.5","2.5"),
labels=c("functional", "functional needs repair", "non functional"))
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_x_discrete(limits=c("0.5","1.5","2.5"),
labels=c("functional", "functional needs repair", "non functional"))
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1)) +
scale_x_discrete(breaks=c("0.5","1.5","2.5"),
labels=c("functional", "functional needs repair", "non functional")) +
ggtitle("Mosaico public_meeting - permit") +
xlab("permit") +
ylab("public_meeting")
ggplot(data=aux)+
geom_mosaic(aes(x=product(public_meeting, permit, status_group), fill=permit),
na.rm=TRUE, offset = 0.04, divider=ddecker()) +
theme_update(plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1)) +
ggtitle("Mosaico public_meeting - permit") +
xlab("permit") +
ylab("public_meeting")
aux %>%
group_by(status_group, variable, value) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N))
aux %>%
group_by(status_group, public_meeting, permit) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N))
aux %>%
group_by(status_group, permit, public_meeting) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N))
print(aux %>%
group_by(status_group, permit, public_meeting) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N))
)
print(aux %>%
group_by(status_group, permit, public_meeting) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N))
, 27)
print(aux %>%
group_by(status_group, permit, public_meeting) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N))
, n=27)
print(aux %>%
group_by(status_group, public_meeting, permit) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N)),
n=27)
print(aux %>%
group_by(public_meeting, permit) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N)),
n=27)
View(submiss)
# Input missing values
myBoxPlot(datTrain, "longitude", "permit", "status_group", TRUE)
# Input missing values
myBoxPlot(datTrain, "longitude", "permit", "status_group", "Distribución de Longitud", TRUE)
# Input missing values
myBoxPlot(datTrain, "permit", "longitude", "status_group", "Distribución de Longitud", TRUE)
# Input missing values
p1<- myBoxPlot(datTrain, "permit", "longitude", "status_group", "Distribución de Longitud", TRUE)
p2<- myBoxPlot(datTrain, "permit", "latitude", "status_group", "Distribución de Longitud", TRUE)
p3<- myBoxPlot(datTrain, "permit", "gps_height", "status_group", "Distribución de Longitud", TRUE)
grid.arrange(p1, p2, p3, ncol=3)
# Input missing values
p1<- myBoxPlot(datTrain, "permit", "longitude", "status_group", "Longitud - permit", FALSE)
p2<- myBoxPlot(datTrain, "permit", "latitude", "status_group", "Latitud - permit", FALSE)
p3<- myBoxPlot(datTrain, "permit", "gps_height", "status_group", "Altitud - permit", TRUE)
grid.arrange(p1, p2, p3, ncol=3)
?grid.arrange
grid.arrange(p1, p2, p3, ncol=3, widths=c(1,1,2))
grid.arrange(p1, p2, p3, ncol=3, widths=c(1,1,1.75))
# Input missing values
p1<- myBoxPlot(datTrain, "permit", "longitude", "public_meeting", "Longitud - permit", FALSE)
p2<- myBoxPlot(datTrain, "permit", "latitude", "public_meeting", "Latitud - permit", FALSE)
p3<- myBoxPlot(datTrain, "permit", "gps_height", "public_meeting", "Altitud - permit", TRUE)
grid.arrange(p1, p2, p3, ncol=3, widths=c(1,1,1.75))
status_group
status_group
status_group
# Input missing values
p1<- myBoxPlot(datTrain, "permit", "longitude", "status_group", "Longitud - permit", FALSE)
p2<- myBoxPlot(datTrain, "permit", "latitude", "status_group", "Latitud - permit", FALSE)
p3<- myBoxPlot(datTrain, "permit", "gps_height", "status_group", "Altitud - permit", TRUE)
grid.arrange(p1, p2, p3, ncol=3, widths=c(1,1,1.75))
unique(datTrain$public_meeting)
aaa<- unique(datTrain$public_meeting)
aaa
aaa[aaa != NA]
is.na(aaa)
unique(datTrain$public_meeting[!is.na(datTrain$public_meeting)])
var1<- "latitude"
var2<- "latitude"
var1<- "permit"
data<- datTotal
dat<- as.data.frame(data)
dat$var2.fac<- cut(dat[[var2]], 12)
missings<- dat[is.na(dat[[var1]]),c(var1, var2, "var2.fac")]
not.missings<- dat[!is.na(dat[[var1]]), c(var1, var2, "var2.fac")]
not.missings
inputator<- as.data.frame(aggregate(not.missings[,1], list(not.missings$var2.fac), mean))
inputator
not.missings
not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N)))
not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N))
inputator<- not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N))
inputator<- not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
select(N == max(N))
inputator<- not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
filter(N == max(N))
inputator
dat$var2.fac<- cut(dat[[var2]], 15)
missings<- dat[is.na(dat[[var1]]),c(var1, var2, "var2.fac")]
not.missings<- dat[!is.na(dat[[var1]]), c(var1, var2, "var2.fac")]
inputator<- not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
filter(N == max(N))
inputator
frequency(not.missings)
frequency(not.missings$permit)
inputator<- not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N)))
inputator
inputator<- not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N))
inputator
set.seed(12345)
aleat<- runif(nrow(missings), 0, 1)
aleat
inputator
not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N)) %>%
arrange(freq)
not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N)) %>%
arrange(!!sym(var1), freq)
not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N)) %>%
arrange(var2.fac, freq)
not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N)) %>%
mutate(cumfreq = cumsum(freq)) %>%
arrange(var2.fac, cumfreq)
inputator<- not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N)) %>%
mutate(cumfreq = cumsum(freq)) %>%
arrange(var2.fac, cumfreq)
i = 2
miss.group<- missings$var2.fac[i]
al<- aleat[i]
miss.group
al
inputator[inputator$Group.1 == miss.group & inputator$cumfreq > al, 2]
inputator
val<- inputator[inputator$Group.1 == miss.group & inputator$cumfreq > al, 2]
val
step1<- inputator[inputator$Group.1 == miss.group,]
step1<- inputator[inputator$var2.fac == miss.group,]
step1
inputator[inputator$var2.fac == miss.group & inputator$cumfreq > al, 2]
al
dat<- as.data.frame(data)
dat$var2.fac<- cut(dat[[var2]], ncuts)
missings<- dat[is.na(dat[[var1]]),c(var1, var2, "var2.fac")]
ncuts =15
dat<- as.data.frame(data)
dat$var2.fac<- cut(dat[[var2]], ncuts)
missings<- dat[is.na(dat[[var1]]),c(var1, var2, "var2.fac")]
not.missings<- dat[!is.na(dat[[var1]]), c(var1, var2, "var2.fac")]
inputator<- not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N)) %>%
mutate(cumfreq = cumsum(freq)) %>%
arrange(var2.fac, cumfreq)
set.seed(12345)
aleat<- runif(nrow(missings), 0, 1)
for(i in seq(1,nrow(missings))){
miss.group<- missings$var2.fac[i]
al<- aleat[i]
val<- inputator[inputator$var2.fac == miss.group & inputator$cumfreq > al, 2]
dat[rownames(missings)[i],var1]<- val
}
dat
summary(dat)
dat<- as.data.frame(data)
dat$auxID<- seq(1,nrow(dat))
dat$var2.fac<- cut(dat[[var2]], ncuts)
missings<- dat[is.na(dat[[var1]]),c(auxID, var1, var2, "var2.fac")]
missings<- dat[is.na(dat[[var1]]),c("auxID", var1, var2, "var2.fac")]
not.missings<- dat[!is.na(dat[[var1]]), c(var1, var2, "var2.fac")]
inputator<- not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N)) %>%
mutate(cumfreq = cumsum(freq)) %>%
arrange(var2.fac, cumfreq)
set.seed(12345)
aleat<- runif(nrow(missings), 0, 1)
vals<- c()
for(i in seq(1,nrow(missings))){
miss.group<- missings$var2.fac[i]
al<- aleat[i]
val<- inputator[inputator$var2.fac == miss.group & inputator$cumfreq > al, 2]
vals<- c(vals, val)
}
dat[dat$auxID %in% missings$auxID,var1]
dat$auxID
missings$auxID
dat[dat$auxID %in% missings$auxID,var1]<- vals
vals
val
al
val<- inputator[inputator$var2.fac == miss.group & inputator$cumfreq > al, 2]
val
val[0]
inputator<- as.data.frame(not.missings %>%
group_by(var2.fac, !!sym(var1)) %>%
summarise(N = n()) %>%
mutate(freq = N / sum(N)) %>%
mutate(cumfreq = cumsum(freq)) %>%
arrange(var2.fac, cumfreq)
)
val<- inputator[inputator$var2.fac == miss.group & inputator$cumfreq > al, 2]
val
aleat<- runif(nrow(missings), 0, 1)
values<- c()
set.seed(12345)
aleat<- runif(nrow(missings), 0, 1)
values<- c()
for(i in seq(1,nrow(missings))){
miss.group<- missings$var2.fac[i]
al<- aleat[i]
val<- inputator[inputator$var2.fac == miss.group & inputator$cumfreq > al, 2]
values<- c(values, val)
}
dat[dat$auxID %in% missings$auxID,var1]<- values
values<- c()
for(i in seq(1,nrow(missings))){
miss.group<- missings$var2.fac[i]
al<- aleat[i]
val<- inputator[inputator$var2.fac == miss.group & inputator$cumfreq > al, 2]
print(val)
values<- c(values, val)
}
values<- c()
for(i in seq(1,nrow(missings))){
miss.group<- missings$var2.fac[i]
al<- aleat[i]
val<- inputator[inputator$var2.fac == miss.group & inputator$cumfreq > al, 2]
print(val[1])
values<- c(values, val[1])
}
dat[dat$auxID %in% missings$auxID,var1]<- values
summary(dat)
dat[, names(data)]
source("funciones.R")
datTotal<- fillMissCat(datTotal, "permit", "latitude", 15)
source("funciones.R")
datTotal<- fillMissCat(datTotal, "permit", "latitude", 15)
summary(datTotal)
p1<- myBoxPlot(datTrain, "public_meeting", "longitude", "status_group", "Longitud - public_meeting",
FALSE)
p2<- myBoxPlot(datTrain, "public_meeting", "latitude", "status_group", "Latitud - public_meeting",
FALSE)
p3<- myBoxPlot(datTrain, "public_meeting", "gps_height", "status_group", "Altitud - public_meeting",
TRUE)
grid.arrange(p1, p2, p3, ncol=3, widths=c(1,1,1.75))
datTotal<- fillMissCat(datTotal, "public_meeting", "latitude", 15)
summary(datTotal)
# 1. Load data ----
datTotal<- readRDS("./dat/datTotal")
summary(datTotal)
datTotal<- fillMissCat(datTotal, "permit", "latitude", 15)
datTotal<- fillMissCat(datTotal, "public_meeting", "latitude", 15)
summary(datTotal)
names(datTotal)
# What to do with numeric variables
datTotal %>%
group_by(region) %>%
summarise(count = n_distinct(region_code))
# What to do with numeric variables
print(datTotal %>%
group_by(region) %>%
summarise(count = n_distinct(region_code)),
21)
# What to do with numeric variables
print(datTotal %>%
group_by(region) %>%
summarise(count = n_distinct(region_code)),
n=21)
print(datTotal %>%
group_by(region_code) %>%
summarise(count = n_distinct(regionregion_code)),
n=21)
print(datTotal %>%
group_by(region_code) %>%
summarise(count = n_distinct(region)),
n=21)
# What to do with numeric variables
print(datTotal %>%
group_by(region) %>%
summarise(count = n_distinct(region_code)) %>%
select(count > 1)
n=21)
# What to do with numeric variables
print(datTotal %>%
group_by(region) %>%
summarise(count = n_distinct(region_code)) %>%
filter(count > 1)
n=21)
print(datTotal %>%
group_by(region_code) %>%
summarise(count = n_distinct(region)) %>%
filter(count > 1),
n=27)
# What to do with numeric variables
print(datTotal %>%
group_by(region) %>%
summarise(count = n_distinct(region_code)) %>%
filter(count > 1),
n=21)
print(datTotal %>%
group_by(district_code) %>%
summarise(count = n_distinct(subvillage)) %>%
filter(count > 1),
n=27)
print(datTotal %>%
group_by(region_code) %>%
summarise(count = n_distinct(region)) %>%
filter(count > 1),
n=27)
print(datTotal %>%
group_by(subvillage) %>%
summarise(count = n_distinct(district_code)) %>%
filter(count > 1),
n=27)
