# 2. Models ----
frml<- as.formula(paste("status_group ~", paste(names(datTwo), collapse="+")))
datTrain<- inner_join(datTwo, datY)
rownames(varResume)<- seq(1:nrow(varResume))
varResume
datTrain<- inner_join(datTwo, datY)
datTrain$status_group<- as.factor(datTrain$status_group)
datTest<- datTwo[datTwo$id %in% submiss$id,]
saveRDS(datTotal, "./dat/datTotal_2")
datTest<- datTwo[datTwo$id %in% submiss$id,]
set.seed(1234)
my_mod_con<- ranger(frml,
data = datTrain,
importance = "impurity")
aux<- as.data.frame(my_mod_con$variable.importance)
aux$id<- rownames(aux)
rownames(aux)<- seq(1, nrow(aux))
aux$importance<- aux[,1]
aux[,1]<- NULL
ggplot(data=aux, aes(x=id, y=importance))+
geom_bar(stat="identity", color="black", fill="lightblue2", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=aux$id[order(aux$importance)]) +
coord_flip() + ggtitle("Importancia con originales")
impo<- ggplot(data=aux, aes(x=id, y=importance))+
geom_bar(stat="identity", color="black", fill="lightblue2", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=aux$id[order(aux$importance)]) +
coord_flip() + ggtitle("Importancia con originales")
# Matriz de confusión
aux<- as.data.frame(my_mod$confusion.matrix)
my_mod<- ranger(frml,
data = datTrain,
importance = "impurity")
# Importancia de las variables
aux<- as.data.frame(my_mod$variable.importance)
aux$id<- rownames(aux)
rownames(aux)<- seq(1, nrow(aux))
aux$importance<- aux[,1]
aux[,1]<- NULL
impo<- ggplot(data=aux, aes(x=id, y=importance))+
geom_bar(stat="identity", color="black", fill="lightblue2", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=aux$id[order(aux$importance)]) +
coord_flip() + ggtitle("Importancia con originales")
# Matriz de confusión
aux<- as.data.frame(my_mod$confusion.matrix)
conf<- ggplot(data=aux, aes(x=true, y=Freq, fill=predicted))+
geom_bar(stat="identity", color="black", show.legend = TRUE, alpha=0.5) +
scale_x_discrete(limits=unique(aux$predicted[order(aux$Freq)])) +
coord_flip() + ggtitle("Matriz de confusión")
grid.arrange(impo, conf, ncol=2)
conf<- ggplot(data=aux, aes(x=true, y=Freq, fill=predicted))+
geom_bar(stat="identity", color="black", show.legend = TRUE, alpha=0.5) +
scale_x_discrete(limits=unique(aux$predicted[order(aux$Freq)])) +
ggtitle("Matriz de confusión")
grid.arrange(impo, conf, ncol=2)
# Error en la predicción
my_mod$prediction.error
# Save the model
saveRDS(my_mod, "./mod/V04_ranger")
conf<- ggplot(data=aux, aes(x=true, y=Freq, fill=predicted))+
geom_bar(stat="identity", color="black", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=unique(aux$predicted[order(aux$Freq)])) +
ggtitle("Matriz de confusión")
grid.arrange(impo, conf, ncol=2)
grid.arrange(impo, conf, ncol=2, widths=c(1.2, 1))
grid.arrange(impo, conf, ncol=2, widths=c(1.3, 1))
# 3. Prediction ----
mod<- readRDS("./mod/V04_ranger")
predicted<- predict(mod, datTest)
pred<- data.frame(id=datTest$id,
status_group = predicted$predictions)
# Write submission
fwrite(pred, "./sub/V04_ranger_one")
# Write submission
fwrite(pred, "./sub/V04_ranger_one.csv")
impo<- ggplot(data=aux, aes(x=id, y=importance))+
geom_bar(stat="identity", color="black", fill="lightblue2", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=aux$id[order(aux$importance)]) +
coord_flip() + ggtitle("Importancia de las variables")
impo<- ggplot(data=aux, aes(x=id, y=importance))+
geom_bar(stat="identity", color="black", fill="lightblue2", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=aux$id[order(aux$importance)]) +
coord_flip() + ggtitle("Importancia de las variables")
# Importancia de las variables
aux<- as.data.frame(my_mod$variable.importance)
aux$id<- rownames(aux)
rownames(aux)<- seq(1, nrow(aux))
aux$importance<- aux[,1]
aux[,1]<- NULL
impo<- ggplot(data=aux, aes(x=id, y=importance))+
geom_bar(stat="identity", color="black", fill="lightblue2", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=aux$id[order(aux$importance)]) +
coord_flip() + ggtitle("Importancia de las variables")
# Matriz de confusión
aux<- as.data.frame(my_mod$confusion.matrix)
conf<- ggplot(data=aux, aes(x=true, y=Freq, fill=predicted))+
geom_bar(stat="identity", color="black", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=unique(aux$predicted[order(aux$Freq)])) +
ggtitle("Matriz de confusión")
grid.arrange(impo, conf, ncol=2, widths=c(1.3, 1))
# 1. Load data ----
datTotal<- readRDS("./dat/datTotal_2")
datTotal
datY<- as.data.frame(fread("./dat/rawTrain_y.csv"))
submiss<- as.data.frame(fread("./dat/SubmissionFormat.csv"))
datTrain<- inner_join(datTotal, datY)
datTrain$status_group<- as.factor(datTrain$status_group)
datTest<- datTotal[datTotal$id %in% submiss$id,]
# 2. Replace factors with too much levels for it's absolute frequency ----
varResume<- readRDS("./dat/varResume_2")
treat_cols<- varResume$name[varResume$Tratamiento=="SI"]
treat_cols
for(col in treat_cols){
cat_count<- as.data.frame(datTotal %>%
group_by(!!sym(col)) %>%
summarise(count = n_distinct(id))
)
datTotal[[col]]<- as.numeric(cat_count$count[match(datTotal[[col]],cat_count[[col]])])
}
datTotal[[col]]
for(col in treat_cols){
cat_count<- as.data.frame(datTotal %>%
group_by(!!sym(col)) %>%
summarise(count = count())
)
datTotal[[col]]<- as.numeric(cat_count$count[match(datTotal[[col]],cat_count[[col]])])
}
for(col in treat_cols){
cat_count<- as.data.frame(datTotal %>%
group_by(!!sym(col)) %>%
summarise(count = count(id))
)
datTotal[[col]]<- as.numeric(cat_count$count[match(datTotal[[col]],cat_count[[col]])])
}
for(col in treat_cols){
cat_count<- as.data.frame(datTotal %>%
group_by(!!sym(col)) %>%
summarise(count = n_distinct(id))
)
datTotal[[col]]<- as.numeric(cat_count$count[match(datTotal[[col]],cat_count[[col]])])
}
varDescription<- as.data.frame(sapply(datTotal, class))
colnames(varDescription)<- "clase"
varDescription$name<- row.names(varDescription)
varDescription$clase<- as.character(varDescription$clase)
row.names(varDescription)<- seq(1, nrow(varDescription))
varDescription$n_NANs<- sapply(datTotal, function(x) sum(is.na(x)))
varDescription<- varDescription[,c(2,1,3)]
# 2.4.1 Categoric variables ----
datTotal_cha<- datTotal[, varDescription$clase == "factor"]
datTotal_cha<- as.data.frame(sapply(datTotal_cha, as.factor))
varFac<- names(datTotal_cha)
aux<- as.data.frame(t(datTotal_cha %>%
summarise_all(funs(n_distinct(.)))))
aux$name<- row.names(aux)
varDescription$n_CATs<- left_join(varDescription, aux)$V1
# 2.4.2 Numeric variables ----
datTotal_num<- datTotal[, varDescription$clase %in% c('numeric', 'integer')]
datTotal_num<- as.data.frame(sapply(datTotal_num, as.numeric))
varNum<- names(datTotal_num)
aux<- as.data.frame(psych::describe(datTotal_num))
aux$vars<- NULL
aux$n<- NULL
aux$name<- row.names(aux)
varDescription<- left_join(varDescription, aux)
varResume<- varDescription[order(varDescription$n_CATs, decreasing=T),c(1,2,3,4,5,7,10,11,6)]
varResume
treat<- c()
varResume<- varDescription[order(varDescription$n_CATs, decreasing=T),c(1,2,3,4,5,7,10,11,6)]
treat<- c()
varResume$Tratamiento<- if_else(varResume$name %in% treat, "SI", "NO")
varResume
saveRDS(varResume, "./dat/varResume_3")
saveRDS(datTotal, "./dat/datTotal_3")
# 3. Models ----
frml<- as.formula(paste("status_group ~", paste(names(datTotal), collapse="+")))
datTrain<- inner_join(datTotal, datY)
datTrain$status_group<- as.factor(datTrain$status_group)
datTest<- datTotal[datTotal$id %in% submiss$id,]
set.seed(1234)
my_mod<- ranger(frml,
data = datTrain,
importance = "impurity")
# Importancia de las variables
aux<- as.data.frame(my_mod$variable.importance)
aux$id<- rownames(aux)
rownames(aux)<- seq(1, nrow(aux))
aux$importance<- aux[,1]
aux[,1]<- NULL
impo<- ggplot(data=aux, aes(x=id, y=importance))+
geom_bar(stat="identity", color="black", fill="lightblue2", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=aux$id[order(aux$importance)]) +
coord_flip() + ggtitle("Importancia de las variables")
# Matriz de confusión
aux<- as.data.frame(my_mod$confusion.matrix)
conf<- ggplot(data=aux, aes(x=true, y=Freq, fill=predicted))+
geom_bar(stat="identity", color="black", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=unique(aux$predicted[order(aux$Freq)])) +
ggtitle("Matriz de confusión")
grid.arrange(impo, conf, ncol=2, widths=c(1.3, 1))
# Error en la predicción
my_mod$prediction.error
# Save the model
saveRDS(my_mod, "./mod/V05_ranger")
# 3. Prediction ----
mod<- readRDS("./mod/V05_ranger")
predicted<- predict(mod, datTest)
pred<- data.frame(id=datTest$id,
status_group = predicted$predictions)
# Write submission
fwrite(pred, "./sub/V05_ranger_one.csv")
# 1. Load data ----
datTotal<- readRDS("./dat/datTotal_3")
datY<- as.data.frame(fread("./dat/rawTrain_y.csv"))
datY1<- ifelse(datY == "functional", "functional", "other")
datY1
datY<- as.data.frame(fread("./dat/rawTrain_y.csv"))
datY1<- data.frame(id = datY$id,
y = ifelse(datY$status_group == "functional", "functional", "other"))
datY1
datY2<- data.frame(id = datY1$id[which(datY1$id == "other")],
y = ifelse(datY$status_group[which(datY1$id == "other")] == "non functional",
"non functional", "functional needs repair"))
datY2
datY1$id[which(datY1$id == "other")]
datY2<- data.frame(id = datY1$id[which(datY1$y == "other")],
y = ifelse(datY$status_group[which(datY1$id == "other")] == "non functional",
"non functional", "functional needs repair"))
datY1<- data.frame(id = datY$id,
y = ifelse(datY$status_group == "functional", "functional", "other"))
datY2<- data.frame(id = datY1$id[which(datY1$y == "other")],
y = ifelse(datY$status_group[which(datY1$id == "other")] == "non functional",
"non functional", "functional needs repair"))
datY2<- data.frame(id = datY1$id[which(datY1$y == "other")],
y = ifelse(datY$status_group[which(datY1$y == "other")] == "non functional",
"non functional", "functional needs repair"))
datY2
datY<- as.data.frame(fread("./dat/rawTrain_y.csv"))
datY1<- data.frame(id = datY$id,
y = ifelse(datY$status_group == "non functional", "non functional", "other"))
datY2<- data.frame(id = datY1$id[which(datY1$y == "other")],
y = ifelse(datY$status_group[which(datY1$y == "other")] == "functional",
"functional", "functional needs repair"))
submiss<- as.data.frame(fread("./dat/SubmissionFormat.csv"))
library(data.table)
library(dplyr)
library(ranger)
library(ggplot2)
library(ggmosaic)
library(gridExtra)
library(klaR)
library(caret)
# 1. Load data ----
datTotal<- readRDS("./dat/datTotal_3")
datY<- as.data.frame(fread("./dat/rawTrain_y.csv"))
datY_1<- data.frame(id = datY$id,
y = ifelse(datY$status_group == "non functional", "non functional", "other"))
datY_2<- data.frame(id = datY1$id[which(datY1$y == "other")],
y = ifelse(datY$status_group[which(datY1$y == "other")] == "functional",
"functional", "functional needs repair"))
datY_2<- data.frame(id = datY_1$id[which(datY_1$y == "other")],
y = ifelse(datY$status_group[which(datY_1$y == "other")] == "functional",
"functional", "functional needs repair"))
submiss<- as.data.frame(fread("./dat/SubmissionFormat.csv"))
datTrain_1<- inner_join(datTotal, datY_1)
datTrain_2<- inner_join(datTotal, datY_2)
datTrain_1
datTrain_1$y<- as.factor(datTrain_1$y)
datTrain_2$y<- as.factor(datTrain_2$y)
datTest<- datTotal[datTotal$id %in% submiss$id,]
# 3. Models ----
mod_1<-train(y~., data = datTrain_1,
method="nb",
metric="ROC",
trControl = trainControl(method = "repeatedcv",
number=8, repeats=10,
savePredictions = "all",
summaryFunction=twoClassSummary,
classProbs=TRUE, returnResamp="all",
verboseIter=FALSE)
)
# 3. Models ----
datTrain_1$y<- make.names(datTrain_1$y)
datTrain_1$y
mod_1<-train(y~., data = datTrain_1,
method="nb",
metric="ROC",
trControl = trainControl(method = "repeatedcv",
number=8, repeats=10,
savePredictions = "all",
summaryFunction=twoClassSummary,
classProbs=TRUE, returnResamp="all",
verboseIter=FALSE)
)
# 3. Models ----
control<-trainControl(method = "LGOCV", p=0.8, number=5, savePredictions = "all",
summaryFunction=twoClassSummary, classProbs=TRUE, returnResamp="all",
verboseIter=FALSE)
datTrain_1$y<- make.names(datTrain_1$y)
mod_1<-train(y~., data = datTrain_1,
method="nb",
metric="ROC",
trControl = control
)
set.seed(1234)
frml<- as.formula(paste("y ~", paste(names(datTotal), collapse="+")))
set.seed(1234)
my_mod_1<- ranger(frml,
data = datTrain_1,
importance = "impurity")
# Importancia de las variables
aux<- as.data.frame(my_mod_1$variable.importance)
aux$id<- rownames(aux)
rownames(aux)<- seq(1, nrow(aux))
aux$importance<- aux[,1]
aux[,1]<- NULL
impo<- ggplot(data=aux, aes(x=id, y=importance))+
geom_bar(stat="identity", color="black", fill="lightblue2", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=aux$id[order(aux$importance)]) +
coord_flip() + theme(legend.position="top") + ggtitle("Importancia de las variables")
# Matriz de confusión
aux<- as.data.frame(my_mod_1$confusion.matrix)
conf<- ggplot(data=aux, aes(x=true, y=Freq, fill=predicted))+
geom_bar(stat="identity", color="black", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=unique(aux$predicted[order(aux$Freq)])) +
ggtitle("Matriz de confusión")
grid.arrange(impo, conf, ncol=2, widths=c(1.3, 1))
# Error en la predicción
my_mod_1$prediction.error
conf<- ggplot(data=aux, aes(x=true, y=Freq, fill=predicted))+
geom_bar(stat="identity", color="black", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=unique(aux$predicted[order(aux$Freq)])) +
theme(legend.position="top") + ggtitle("Matriz de confusión")
grid.arrange(impo, conf, ncol=2, widths=c(1.3, 1))
conf<- ggplot(data=aux, aes(x=true, y=Freq, fill=predicted))+
geom_bar(stat="identity", color="black", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=unique(aux$predicted[order(aux$Freq)])) +
theme(legend.position="top") + ggtitle("Matriz de confusión")
grid.arrange(impo, conf, ncol=2, widths=c(1.3, 1))
conf<- ggplot(data=aux, aes(x=true, y=Freq, fill=predicted))+
geom_bar(stat="identity", color="black", show.legend = TRUE, alpha=0.5) +
scale_x_discrete(limits=unique(aux$predicted[order(aux$Freq)])) +
theme(legend.position="top") + ggtitle("Matriz de confusión")
grid.arrange(impo, conf, ncol=2, widths=c(1.3, 1))
set.seed(1234)
# 2.2 Second model
my_mod_2<- ranger(frml,
data = datTrain_2,
importance = "impurity")
# Importancia de las variables
aux<- as.data.frame(my_mod_2$variable.importance)
aux$id<- rownames(aux)
rownames(aux)<- seq(1, nrow(aux))
aux$importance<- aux[,1]
aux[,1]<- NULL
impo<- ggplot(data=aux, aes(x=id, y=importance))+
geom_bar(stat="identity", color="black", fill="lightblue2", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=aux$id[order(aux$importance)]) +
coord_flip() +  ggtitle("Importancia de las variables")
# Matriz de confusión
aux<- as.data.frame(my_mod_2$confusion.matrix)
conf<- ggplot(data=aux, aes(x=true, y=Freq, fill=predicted))+
geom_bar(stat="identity", color="black", show.legend = TRUE, alpha=0.5) +
scale_x_discrete(limits=unique(aux$predicted[order(aux$Freq)])) +
theme(legend.position="top") + ggtitle("Matriz de confusión")
grid.arrange(impo, conf, ncol=2, widths=c(1.3, 1))
# Error en la predicción
my_mod_1$prediction.error
# Save the model
saveRDS(my_mod_1, "./mod/V06_ranger_1")
# Save the model
saveRDS(my_mod_2, "./mod/V06_ranger_2")
# Save the model
saveRDS(my_mod_2, "./mod/V06_ranger_2")
predicted<- predict(mod, datTest)
# 3. Prediction ----
mod<- readRDS("./mod/V06_ranger_1")
predicted<- predict(mod, datTest)
pred<- data.frame(id=datTest$id,
status_group = predicted$predictions)
pred_1<- data.frame(id=datTest$id,
status_group = predicted$predictions)
pred_1$id[which(pred_1$status_group == "other"]
pred_1$id[which(pred_1$status_group == "other")]
datTest2<- datTest[which(datTest$id %in% pred_1$id[which(pred_1$status_group == "other")])]
datTest2<- datTest[which(datTest$id %in% pred_1$id[which(pred_1$status_group == "other")]),]
datTest2
length(which(datTrain_1$y == "non functional"))
datTrain_1$y
length(which(datTrain_1$y == "non.functional"))
# 1. Load data ----
datTotal<- readRDS("./dat/datTotal_3")
datY<- as.data.frame(fread("./dat/rawTrain_y.csv"))
datY_1<- data.frame(id = datY$id,
y = ifelse(datY$status_group == "non functional", "non functional", "other"))
datY_2<- data.frame(id = datY_1$id[which(datY_1$y == "other")],
y = ifelse(datY$status_group[which(datY_1$y == "other")] == "functional",
"functional", "functional needs repair"))
submiss<- as.data.frame(fread("./dat/SubmissionFormat.csv"))
datTrain_1<- inner_join(datTotal, datY_1)
datTrain_2<- inner_join(datTotal, datY_2)
datTrain_1$y<- as.factor(datTrain_1$y)
datTrain_2$y<- as.factor(datTrain_2$y)
datTest<- datTotal[datTotal$id %in% submiss$id,]
frml<- as.formula(paste("y ~", paste(names(datTotal), collapse="+")))
set.seed(1234)
# 2.1 First model ----
my_mod_1<- ranger(frml,
data = datTrain_1,
importance = "impurity")
# Importancia de las variables
aux<- as.data.frame(my_mod_1$variable.importance)
aux$id<- rownames(aux)
rownames(aux)<- seq(1, nrow(aux))
aux$importance<- aux[,1]
aux[,1]<- NULL
impo<- ggplot(data=aux, aes(x=id, y=importance))+
geom_bar(stat="identity", color="black", fill="lightblue2", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=aux$id[order(aux$importance)]) +
coord_flip() +  ggtitle("Importancia de las variables")
# Matriz de confusión
aux<- as.data.frame(my_mod_1$confusion.matrix)
conf<- ggplot(data=aux, aes(x=true, y=Freq, fill=predicted))+
geom_bar(stat="identity", color="black", show.legend = TRUE, alpha=0.5) +
scale_x_discrete(limits=unique(aux$predicted[order(aux$Freq)])) +
theme(legend.position="top") + ggtitle("Matriz de confusión")
grid.arrange(impo, conf, ncol=2, widths=c(1.3, 1))
# Error en la predicción
my_mod_1$prediction.error
# Save the model
saveRDS(my_mod_1, "./mod/V06_ranger_1")
# 2.2 Second model
my_mod_2<- ranger(frml,
data = datTrain_2,
importance = "impurity")
# Importancia de las variables
aux<- as.data.frame(my_mod_2$variable.importance)
aux$id<- rownames(aux)
rownames(aux)<- seq(1, nrow(aux))
aux$importance<- aux[,1]
aux[,1]<- NULL
impo<- ggplot(data=aux, aes(x=id, y=importance))+
geom_bar(stat="identity", color="black", fill="lightblue2", show.legend = FALSE, alpha=0.5) +
scale_x_discrete(limits=aux$id[order(aux$importance)]) +
coord_flip() +  ggtitle("Importancia de las variables")
# Matriz de confusión
aux<- as.data.frame(my_mod_2$confusion.matrix)
conf<- ggplot(data=aux, aes(x=true, y=Freq, fill=predicted))+
geom_bar(stat="identity", color="black", show.legend = TRUE, alpha=0.5) +
scale_x_discrete(limits=unique(aux$predicted[order(aux$Freq)])) +
theme(legend.position="top") + ggtitle("Matriz de confusión")
grid.arrange(impo, conf, ncol=2, widths=c(1.3, 1))
# Error en la predicción
my_mod_1$prediction.error
# Error en la predicción
my_mod_2$prediction.error
# Save the model
saveRDS(my_mod_2, "./mod/V06_ranger_2")
# 3. Prediction ----
mod<- readRDS("./mod/V06_ranger_1")
predicted<- predict(mod, datTest)
pred_1<- data.frame(id=datTest$id,
status_group = predicted$predictions)
pred_1
datTest2<- datTest[which(pred_1$status_group == "other"),]
datTest_2<- datTest[which(pred_1$status_group == "other"),]
datTest_2
mod<- readRDS("./mod/V06_ranger_2")
predicted<- predict(mod, datTest)
predicted<- predict(mod, datTest_2)
datTest_2<- datTest[which(pred_1$status_group == "other"),]
predicted<- predict(mod, datTest_2)
pred_2<- data.frame(id=datTest_2$id,
status_group = predicted$predictions)
pred_2
rbind(pred_1[pred_1$status_group != "other"], pred_2)
pred_1
rbind(pred_1[pred_1$status_group != "other",], pred_2)
length(which(datTrain_1$y == "non functional"))/nrow(datTrain_1)
length(which(pred$status_group == "non functional"))/nrow(pred)
pred$status_group
pred<- rbind(pred_1[pred_1$status_group == "non functional",], pred_2)
pred
which(pred$status_group == "non functional")
length(which(pred$status_group == "non functional"))
nrow(pred)
length(which(pred$status_group == "non functional"))/nrow(pred)
length(which(datTrain_1$y == "non functional"))/nrow(datTrain_1)
# Write submission
fwrite(pred, "./sub/V06_ranger_double.csv")
pred
inner_join(pred, submiss)
inner_join(pred, submiss$id)
submiss
inner_join(pred, submiss, by=id)
inner_join(pred, submiss, by="id")
aaa<- inner_join(pred, submiss, by="id")
aux<- rbind(pred_1[pred_1$status_group == "non functional",], pred_2)
pred<- inner_join(submiss, aux, by="id")[,c(1,3)]
pred
# Write submission
fwrite(pred, "./sub/V06_ranger_double.csv")
# Checkeo tontorrón
length(which(datTrain_1$y == "non functional"))/nrow(datTrain_1)
length(which(pred$status_group == "non functional"))/nrow(pred)
pred$status_group<- pred$status_group.y
pred$status_group.y<- NULL
pred
# Checkeo tontorrón
length(which(datTrain_1$y == "non functional"))/nrow(datTrain_1)
length(which(pred$status_group == "non functional"))/nrow(pred)
# Write submission
fwrite(pred, "./sub/V06_ranger_double.csv")
